@*<RadzenTree @ref="TreeNav" Expand="@TreeExpanded" Change="@TreeNodeClick" Data="@entries">
    <RadzenTreeLevel TextProperty="Title" />
</RadzenTree>*@
@if (Root != null)
{
    <MudTreeView @bind-SelectedValue="SelectedValue" Hover="true">
        <MudTreeViewItem Value="@(Root.Title)" Icon="@(Icons.Custom.Uncategorized.Folder)">
            @if (Root.ChildNodes.Count > 0)
            {
                foreach (var item in Root.ChildNodes)
                {
                <MudTreeViewItem Value="@(item.Title)" @onclick="@(()=>OnNodeClicked.InvokeAsync(item.Data))" Icon="@Icons.Custom.FileFormats.FileCode" />
                }

            }
    </MudTreeViewItem>

</MudTreeView>
}
@code {
    string SelectedValue;
    [Parameter]
    public TreeNode Root { set; get; }
    IEnumerable<TreeNode> entries = null;
    //public RadzenTree TreeNav { get; set; }

    [Parameter]
    public EventCallback<object> OnNodeClicked { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
        }
    }

    //void TreeNodeClick(TreeEventArgs args)
    //{
    //    if (args.Value != null)
    //    {
    //        var node = args.Value as TreeNode;

    //        OnNodeClicked.InvokeAsync(node.Data);

    //    }
    //    //Log("Change", $"Item Text: {args.Text}");
    //}
    //void TreeExpanded(TreeExpandEventArgs args)
    //{
    //    if (args.Value is TreeNode node)
    //    {
    //        var datas = new List<TreeNode>();
    //        args.Children.Data = node.ChildNodes ?? datas;
    //        args.Children.TextProperty = "Title";
    //        args.Children.HasChildren = (x) =>
    //        {
    //            var item = x as TreeNode;
    //            var data = item.ChildNodes;
    //            return data != null && data.Any();
    //        };

    //    }
    //}

    void LoadEmptyTree()
    {
        if (Root != null)
        {
            entries = new List<TreeNode> { Root };
        }
    }

    public void SetRootNode(TreeNode root)
    {
        this.Root = root;
        entries = new List<TreeNode> { this.Root };
    }

    protected override async Task OnInitializedAsync()
    {
        LoadEmptyTree();
    }

    public class TreeNode
    {
        public string Title { get; set; }
        public object Data { get; set; }
        public TreeNode(string Title, object Data)
        {
            this.Title = Title;
            this.Data = Data;
            ChildNodes = new List<TreeNode>();
        }
        public List<TreeNode> ChildNodes { get; set; }
    }


    }