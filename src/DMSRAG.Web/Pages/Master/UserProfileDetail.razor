@inject IJSRuntime jsRuntime
@using System.IO
@using DMSRAG.Tools;
@inject IToastService toastService
@inject UserProfileService service
@inject DataBlobHelper DataBlobHelper;

@inject ISnackbar Snackbar
<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Info" Class="mr-3 mb-n1" />
            @CustomHeader
        </MudText>
    </TitleContent>
    <DialogContent>
        <EditForm Model="@TaskObject" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <MudGrid>
                <MudItem xs="12" sm="12">
                    <MudCard>
                        <MudCardContent>
                            <input type="hidden" @bind="@TaskObject.Id" />
                            <MudTextField Label="Nama" HelperText="Nama"
                                          @bind-Value="TaskObject.FullName" For="@(() => TaskObject.FullName)" />

                            <MudTextField Label="Email" Class="mt-3"
                                          @bind-Value="TaskObject.Email" For="@(() => TaskObject.Email)" InputType="InputType.Email" />

                            <MudTextField Label="Alamat" Class="mt-3"
                            @bind-Value="TaskObject.Address" For="@(() => TaskObject.Address)" InputType="InputType.Text" />
                       
                            <MudTextField Label="Phone" Class="mt-3"
                                          @bind-Value="TaskObject.Phone" For="@(() => TaskObject.Phone)" InputType="InputType.Telephone" />
                            <MudTextField Label="Password" Class="mt-3"
                                          @bind-Value="TaskObject.Password" For="@(() => TaskObject.Password)" InputType="InputType.Password" />
                            <MudTextField Label="Retype Password" Class="mt-3"
                                          @bind-Value="RetypePass" For="@(() => RetypePass)" InputType="InputType.Password" />


                            <MudSelect T="Roles" Label="Role" Required @bind-Value="@TaskObject.Role" AnchorOrigin="Origin.BottomCenter">
                                 <MudSelectItem Value="@(Roles.Pengurus)">@Roles.Pengurus.ToString()</MudSelectItem>
                                <MudSelectItem Value="@(Roles.Admin)">@Roles.Admin.ToString()</MudSelectItem>
                                <MudSelectItem Value="@(Roles.User)">@Roles.User.ToString()</MudSelectItem>
                            </MudSelect>

                            <div class="form-group">
                                <label for="nim">Upload Foto</label>
                                @if (!string.IsNullOrEmpty(FileUrl))
                                {
                                    <div class="alert alert-info">Foto sudah di upload.</div>
                                }
                                else
                                {
                                    <div class="alert alert-warning"> pilih foto Anda lalu tunggu sampai file selesai di upload.</div>
                                }

                                <InputFile id="fileInput1" Size="Size.Small" OnChange="HandleFileSelected" />
                            </div>
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="mr-2">Simpan</MudButton>
                            <MudButton ButtonType="ButtonType.Button" OnClick="Cancel" Variant="Variant.Filled" Color="Color.Secondary">Cancel</MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>

            </MudGrid>
        </EditForm>
    </DialogContent>
    <DialogActions>

    </DialogActions>
</MudDialog>

@code {
    public string FileUrl { get; set; }
    string RetypePass;
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    [Parameter]
    public string CustomHeader { get; set; }
    [Parameter]
    public UserProfile TaskObject { get; set; }
    [Parameter]
    public Action DataChanged { get; set; }
    private async Task HandleFileSelected(InputFileChangeEventArgs e)

    {
        var file = e.File;
        if (file != null)
        {
            var ms = new MemoryStream();
            await file.OpenReadStream(AppConstants.MaxAllowedFileSize).CopyToAsync(ms);
            string Ext = Path.GetExtension(file.Name);
            string newName = $"foto_{DateTime.Now.ToString("dd_MM_yyyy_HH_mm_ss")}_{file.Name}";
            await DataBlobHelper.UploadFile(newName, ms.ToArray());
            FileUrl = $"{AppConstants.UploadUrlPrefix}/{newName}";
        }

    }
    protected override async Task OnInitializedAsync()
    {
        FileUrl = TaskObject.PicUrl;
    }
    private void OnValidSubmit(EditContext context)
    {
        if (string.IsNullOrEmpty(TaskObject.Email))
        {
            Snackbar.Add("Email harus diisi sebagai username", Severity.Error);
            return;
        }

        Encryption enc = new Encryption();
        if (!string.IsNullOrEmpty(FileUrl))
            TaskObject.PicUrl = FileUrl;
        if (TaskObject.Id == string.Empty)
        {
            TaskObject.Username = TaskObject.Email;
            if (service.IsUserExists(TaskObject.Username))
            {
                Snackbar.Add("User dengan email ini sudah terdaftar", Severity.Error);
                return;
            }
            TaskObject.Password = enc.Encrypt(AppConstants.DefaultPass);
            var hasil = service.InsertData(TaskObject);
            if (!hasil)
            {
                Snackbar.Add("Gagal menyimpan data. Isi data dengan lengkap.", Severity.Error);
                //toastService.ShowError("Gagal menyimpan data. Isi data dengan lengkap.", "Perhatian");
            }
        }
        else
        {
            //TaskObject.UpdatedDate = DateHelper.GetLocalTimeNow();

            service.UpdateData(TaskObject);
        }
        //In a real world scenario this bool would probably be a service to delete the item from api/database
        Snackbar.Add("Data Saved", Severity.Success);
        MudDialog.Close(DialogResult.Ok(TaskObject.Id));
        DataChanged?.Invoke();


    }

}
